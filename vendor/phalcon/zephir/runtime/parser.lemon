
/*
 +--------------------------------------------------------------------------+
 | Zephir Language                                                          |
 +--------------------------------------------------------------------------+
 | Copyright (c) 2013-2015 Zephir Team and contributors                     |
 +--------------------------------------------------------------------------+
 | This source file is subject the MIT license, that is bundled with        |
 | this package in the file LICENSE, and is available through the           |
 | world-wide-web at the following url:                                     |
 | http://zephir-lang.com/license.html                                      |
 |                                                                          |
 | If you did not receive a copy of the MIT license and are unable          |
 | to obtain it through the world-wide-web, please send a note to           |
 | license@zephir-lang.com so we can mail you a copy immediately.           |
 +--------------------------------------------------------------------------+
*/

/**
 * Zephir parser
 *
 * This parser is intended to produce a better and safe code generation
 * rather than full expresiveness
 */

%token_prefix ZEPHIR_
%token_type {zephir_parser_token*}
%default_type {zval*}
%extra_argument {zephir_parser_status *status}
%name zephir_

%left PUBLIC PROTECTED STATIC PRIVATE SCOPED .

%left COMMA .
%right REQUIRE .
%right QUESTION .
%right LIKELY UNLIKELY .
%left INSTANCEOF .
%left OR .
%left AND .
%left BITWISE_OR BITWISE_AND BITWISE_XOR BITWISE_SHIFTLEFT BITWISE_SHIFTRIGHT .
%left EQUALS IDENTICAL LESS GREATER LESSEQUAL GREATEREQUAL NOTIDENTICAL NOTEQUALS .
%left ADD SUB CONCAT .
%left MUL DIV MOD .
%right ISSET FETCH EMPTY .
%right TYPEOF .
%right CLONE .
%right NEW .
%right NOT .
%right PARENTHESES_CLOSE .
%right SBRACKET_OPEN .
%right ARROW .

%include {

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <php.h>
#include "php_zephir.h"
#include "scanner.h"
#include "zephir.h"
#include "parser.h"

#define zephir_add_active_file(ret, state) { \
	zval *tmp; \
	ALLOC_INIT_ZVAL(tmp); \
	ZVAL_STRING(tmp, state->active_file, 1); \
	zend_symtable_update(Z_ARRVAL_P(ret), "file", strlen("file")+1, &tmp, sizeof(zval*), NULL); \
}

#define zephir_add_active_line(ret, state) { \
	zval *tmp; \
	ALLOC_INIT_ZVAL(tmp); \
	ZVAL_LONG(tmp, state->active_line); \
	zend_symtable_update(Z_ARRVAL_P(ret), "line", strlen("line")+1, &tmp, sizeof(zval*), NULL); \
}

#define zephir_add_active_char(ret, state) { \
	zval *tmp; \
	ALLOC_INIT_ZVAL(tmp); \
	ZVAL_LONG(tmp, state->active_char); \
	zend_symtable_update(Z_ARRVAL_P(ret), "char", strlen("char")+1, &tmp, sizeof(zval*), NULL); \
}

static zval *zephir_new_array()
{
	zval *z;
	ALLOC_INIT_ZVAL(z);
	array_init(z);
	return z;
}

static zval *zephir_new_string(const char *str) {
	zval *tmp;
	ALLOC_INIT_ZVAL(tmp);
	ZVAL_STRING(tmp, str, 1);
	return tmp;
}

static zval *zephir_new_int(long i) {
	zval *tmp;
	ALLOC_INIT_ZVAL(tmp);
	ZVAL_LONG(tmp, i);
	return tmp;
}

static void zephir_array_add(zval *ret, const char *index, zval *value) {
	zend_symtable_update(Z_ARRVAL_P(ret), index, strlen(index)+1, &value, sizeof(zval*), NULL);
}

static zval *zephir_ret_literal(int type, zephir_parser_token *T, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	switch (type) {

		case ZEPHIR_T_CONSTANT:
			zephir_array_add(ret, "type", zephir_new_string("constant"));
			break;

		case ZEPHIR_T_IDENTIFIER:
			zephir_array_add(ret, "type", zephir_new_string("variable"));
			break;

		case ZEPHIR_T_INTEGER:
			zephir_array_add(ret, "type", zephir_new_string("int"));
			break;

		case ZEPHIR_T_DOUBLE:
			zephir_array_add(ret, "type", zephir_new_string("double"));
			break;

		case ZEPHIR_T_NULL:
			zephir_array_add(ret, "type", zephir_new_string("null"));
			break;

		case ZEPHIR_T_STRING:
			zephir_array_add(ret, "type", zephir_new_string("string"));
			break;

		case ZEPHIR_T_CHAR:
			zephir_array_add(ret, "type", zephir_new_string("char"));
			break;

		default:
			if (type == ZEPHIR_T_TRUE) {
				zephir_array_add(ret, "type", zephir_new_string("bool"));
				zephir_array_add(ret, "value", zephir_new_string("true"));
			} else {
				if (type == ZEPHIR_T_FALSE) {
					zephir_array_add(ret, "type", zephir_new_string("bool"));
					zephir_array_add(ret, "value", zephir_new_string("false"));
				} else {
					fprintf(stderr, "literal??\n");
				}
			}
	}

	if (T) {
		zephir_array_add(ret, "value", zephir_new_string(T->token));
		efree(T->token);
		efree(T);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_expr(char *type, zval *left, zval *right, zval *extra, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string(type));

	if (left) {
		zephir_array_add(ret, "left", left);
	}
	if (right) {
		zephir_array_add(ret, "right", right);
	}
	if (extra) {
		zephir_array_add(ret, "extra", extra);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_array_item(zval *key, zval *value, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	if (key) {
		zephir_array_add(ret, "key", key);
	}
	zephir_array_add(ret, "value", value);

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_namespace(zephir_parser_token *T, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("namespace"));
	zephir_array_add(ret, "name", zephir_new_string(T->token));

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(T->token);
	efree(T);

	return ret;
}

static zval *zephir_ret_use_aliases(zval *use_aliases_list, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("use"));
	zephir_array_add(ret, "aliases", use_aliases_list);

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_use_aliases_item(zephir_parser_token *T, zephir_parser_token *A, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "name", zephir_new_string(T->token));
	if (A) {
		zephir_array_add(ret, "alias", zephir_new_string(A->token));
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(T->token);
	efree(T);

	return ret;
}

static zval *zephir_ret_class(zephir_parser_token *T, zval *class_definition, int is_abstract, int is_final,
	zephir_parser_token *E, zval *I, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("class"));
	zephir_array_add(ret, "name", zephir_new_string(T->token));

	zephir_array_add(ret, "abstract", zephir_new_int(is_abstract));
	zephir_array_add(ret, "final", zephir_new_int(is_final));

	if (E) {
		zephir_array_add(ret, "extends", zephir_new_string(E->token));
		efree(E->token);
		efree(E);
	}

	if (I) {
		zephir_array_add(ret, "implements", I);
	}

	if (class_definition) {
		zephir_array_add(ret, "definition", class_definition);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(T->token);
	efree(T);

	return ret;
}

static zval *zephir_ret_interface(zephir_parser_token *T, zval *interface_definition, zephir_parser_token *E, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("interface"));
	zephir_array_add(ret, "name", zephir_new_string(T->token));

	if (E) {
    	zephir_array_add(ret, "extends", zephir_new_string(E->token));
	}

	if (interface_definition) {
		zephir_array_add(ret, "definition", interface_definition);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(T->token);
	efree(T);

	return ret;
}

static zval *zephir_ret_class_definition(zval *properties, zval *methods, zval *constants, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	if (properties) {
		zephir_array_add(ret, "properties", properties);
	}
	if (methods) {
		zephir_array_add(ret, "methods", methods);
	}
	if (constants) {
		zephir_array_add(ret, "constants", constants);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_interface_definition(zval *methods, zval *constants, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	if (methods) {
		zephir_array_add(ret, "methods", methods);
	}
	if (constants) {
		zephir_array_add(ret, "constants", constants);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_class_property(zval *visibility, zephir_parser_token *T,
		zval *default_value, zephir_parser_token *D, zval *shortcuts, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "visibility", visibility);
	zephir_array_add(ret, "type", zephir_new_string("property"));
	zephir_array_add(ret, "name", zephir_new_string(T->token));

	if (default_value) {
		zephir_array_add(ret, "default", default_value);
	}

	if (D) {
		zephir_array_add(ret, "docblock", zephir_new_string(D->token));
		efree(D->token);
		efree(D);
	}

	if (shortcuts) {
		zephir_array_add(ret, "shortcuts", shortcuts);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(T->token);
	efree(T);

	return ret;
}

static zval *zephir_ret_property_shortcut(zephir_parser_token *C, zephir_parser_token *D, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("shortcut"));
	if (C) {
		zephir_array_add(ret, "docblock", zephir_new_string(C->token));
	}
	zephir_array_add(ret, "name", zephir_new_string(D->token));

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(D->token);
	D->free_flag = 0;

	return ret;
}

static zval *zephir_ret_class_const(zephir_parser_token *T, zval *default_value, zephir_parser_token *D, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("const"));
	zephir_array_add(ret, "name", zephir_new_string(T->token));
	zephir_array_add(ret, "default", default_value);

	if (D) {
		zephir_array_add(ret, "docblock", zephir_new_string(D->token));
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(T->token);
	efree(T);

	return ret;
}

static zval *zephir_ret_class_method(zval *visibility, zephir_parser_token *T, zval *parameters,
	zval *statements, zephir_parser_token *D, zval *return_type, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "visibility", visibility);
	zephir_array_add(ret, "type", zephir_new_string("method"));
	zephir_array_add(ret, "name", zephir_new_string(T->token));

	if (parameters) {
		zephir_array_add(ret, "parameters", parameters);
	}

	if (statements) {
		zephir_array_add(ret, "statements", statements);
	}

	if (D) {
		zephir_array_add(ret, "docblock", zephir_new_string(D->token));
		efree(D->token);
		efree(D);
	}

	if (return_type) {
		zephir_array_add(ret, "return-type", return_type);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(T->token);
	efree(T);

	return ret;
}

static zval *zephir_ret_parameter(int const_param, zval *type, zval *cast, zephir_parser_token *N, zval *default_value,
	int mandatory, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("parameter"));
	zephir_array_add(ret, "name", zephir_new_string(N->token));
	zephir_array_add(ret, "const", zephir_new_int(const_param));

	if (type) {
		zephir_array_add(ret, "data-type", type);
		zephir_array_add(ret, "mandatory", zephir_new_int(mandatory));
	}
	if (cast) {
		zephir_array_add(ret, "cast", cast);
	}
	if (default_value) {
		zephir_array_add(ret, "default", default_value);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(N->token);
	efree(N);

	return ret;
}

static zval *zephir_ret_return_type(int is_void, zval *return_type_list, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("return-type"));

	zephir_array_add(ret, "list", return_type_list);

	zephir_array_add(ret, "void", zephir_new_int(is_void));

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_return_type_item(zval *type, zval *cast, int mandatory, int collection, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("return-type-parameter"));

	if (type) {
		zephir_array_add(ret, "data-type", type);
		zephir_array_add(ret, "mandatory", zephir_new_int(mandatory));
	}

	if (cast) {
		zephir_array_add(ret, "cast", cast);
		zephir_array_add(ret, "collection", zephir_new_int(collection));
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_type(int type)
{
	switch (type) {
		case ZEPHIR_TYPE_INTEGER:
			return zephir_new_string("int");
		case ZEPHIR_TYPE_UINTEGER:
			return zephir_new_string("uint");
		case ZEPHIR_TYPE_DOUBLE:
			return zephir_new_string("double");
		case ZEPHIR_TYPE_BOOL:
			return zephir_new_string("bool");
		case ZEPHIR_TYPE_LONG:
			return zephir_new_string("long");
		case ZEPHIR_TYPE_ULONG:
			return zephir_new_string("ulong");
		case ZEPHIR_TYPE_STRING:
			return zephir_new_string("string");
		case ZEPHIR_TYPE_CHAR:
			return zephir_new_string("char");
		case ZEPHIR_TYPE_ARRAY:
			return zephir_new_string("array");
		case ZEPHIR_TYPE_VAR:
			return zephir_new_string("variable");
        case ZEPHIR_TYPE_CALLABLE:
            return zephir_new_string("callable");
        case ZEPHIR_TYPE_RESOURCE:
            return zephir_new_string("resource");
        case ZEPHIR_TYPE_OBJECT:
            return zephir_new_string("object");
		case ZEPHIR_T_TYPE_NULL:
            return zephir_new_string("null");
        case ZEPHIR_T_TYPE_THIS:
            return zephir_new_string("this");
		default:
			fprintf(stderr, "unknown type?\n");
	}

}

static zval *zephir_ret_list(zval *list_left, zval *right_list)
{
	zval *ret;
	HashPosition pos;
	HashTable *list;

	MAKE_STD_ZVAL(ret);
	array_init(ret);

	if (list_left) {

		list = Z_ARRVAL_P(list_left);
		if (zend_hash_index_exists(list, 0)) {
			zend_hash_internal_pointer_reset_ex(list, &pos);
			for (;; zend_hash_move_forward_ex(list, &pos)) {

				zval ** item;

				if (zend_hash_get_current_data_ex(list, (void**) &item, &pos) == FAILURE) {
					break;
				}

				Z_ADDREF_PP(item);
				add_next_index_zval(ret, *item);

			}
			zval_ptr_dtor(&list_left);
		} else {
			add_next_index_zval(ret, list_left);
		}
	}

	add_next_index_zval(ret, right_list);

	return ret;
}

static zval *zephir_ret_let_statement(zval *assignments, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("let"));
	zephir_array_add(ret, "assignments", assignments);

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_let_assignment(char *type, zval *operator, zephir_parser_token *V, zephir_parser_token *P, zval *index_expr, zval *expr, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "assign-type", zephir_new_string(type));
	if (operator) {
		zephir_array_add(ret, "operator", operator);
	}
	zephir_array_add(ret, "variable", zephir_new_string(V->token));
	if (P) {
		zephir_array_add(ret, "property", zephir_new_string(P->token));
	}
	if (index_expr) {
		zephir_array_add(ret, "index-expr", index_expr);
	}
	if (expr) {
		zephir_array_add(ret, "expr", expr);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_if_statement(zval *expr, zval *statements, zval *else_statements, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("if"));
	zephir_array_add(ret, "expr", expr);

	if (statements) {
		zephir_array_add(ret, "statements", statements);
	}

	if (else_statements) {
		zephir_array_add(ret, "else_statements", else_statements);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_switch_statement(zval *expr, zval *clauses, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("switch"));
	zephir_array_add(ret, "expr", expr);

	if (clauses) {
		zephir_array_add(ret, "clauses", clauses);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_case_clause(zval *expr, zval *statements, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	if (expr) {
		zephir_array_add(ret, "type", zephir_new_string("case"));
		zephir_array_add(ret, "expr", expr);
	} else {
		zephir_array_add(ret, "type", zephir_new_string("default"));
	}

	if (statements) {
		zephir_array_add(ret, "statements", statements);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_while_statement(zval *expr, zval *statements, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("while"));
	zephir_array_add(ret, "expr", expr);

	if (statements) {
		zephir_array_add(ret, "statements", statements);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_do_while_statement(zval *expr, zval *statements, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("do-while"));
	zephir_array_add(ret, "expr", expr);

	if (statements) {
		zephir_array_add(ret, "statements", statements);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_try_catch_statement(zval *statements, zval *catches, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("try-catch"));

	if (statements) {
		zephir_array_add(ret, "statements", statements);
	}
	if (catches) {
		zephir_array_add(ret, "catches", catches);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_catch_statement(zval *classes, zval *variable, zval *statements, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	if (classes) {
		zephir_array_add(ret, "classes", classes);
	}

	if (variable) {
		zephir_array_add(ret, "variable", variable);
	}

	if (statements) {
		zephir_array_add(ret, "statements", statements);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_for_statement(zval *expr, zephir_parser_token *K, zephir_parser_token *V, int reverse, zval *statements, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("for"));
	zephir_array_add(ret, "expr", expr);

	if (K) {
		zephir_array_add(ret, "key", zephir_new_string(K->token));
	}
	if (V) {
		zephir_array_add(ret, "value", zephir_new_string(V->token));
	}

	zephir_array_add(ret, "reverse", zephir_new_int(reverse));

	if (statements) {
		zephir_array_add(ret, "statements", statements);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_loop_statement(zval *statements, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("loop"));

	if (statements) {
		zephir_array_add(ret, "statements", statements);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_empty_statement(zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("empty"));

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_break_statement(zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("break"));

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_continue_statement(zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("continue"));

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_echo_statement(zval *expressions, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("echo"));
	zephir_array_add(ret, "expressions", expressions);

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_return_statement(zval *expr, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("return"));
	if (expr) {
		zephir_array_add(ret, "expr", expr);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_require_statement(zval *expr, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("require"));
	zephir_array_add(ret, "expr", expr);

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_fetch_statement(zval *expr, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("fetch"));
	zephir_array_add(ret, "expr", expr);

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_fcall_statement(zval *expr, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("fcall"));
	zephir_array_add(ret, "expr", expr);

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_mcall_statement(zval *expr, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("mcall"));
	zephir_array_add(ret, "expr", expr);

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_scall_statement(zval *expr, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("scall"));
	zephir_array_add(ret, "expr", expr);

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_unset_statement(zval *expr, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("unset"));

	zephir_array_add(ret, "expr", expr);

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_declare_statement(int type, zval *variables, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("declare"));

	switch (type) {

		case ZEPHIR_T_TYPE_INTEGER:
			zephir_array_add(ret, "data-type", zephir_new_string("int"));
			break;

		case ZEPHIR_T_TYPE_UINTEGER:
			zephir_array_add(ret, "data-type", zephir_new_string("uint"));
			break;

		case ZEPHIR_T_TYPE_LONG:
			zephir_array_add(ret, "data-type", zephir_new_string("long"));
			break;

		case ZEPHIR_T_TYPE_ULONG:
			zephir_array_add(ret, "data-type", zephir_new_string("ulong"));
			break;

		case ZEPHIR_T_TYPE_CHAR:
			zephir_array_add(ret, "data-type", zephir_new_string("char"));
			break;

		case ZEPHIR_T_TYPE_UCHAR:
			zephir_array_add(ret, "data-type", zephir_new_string("uchar"));
			break;

		case ZEPHIR_T_TYPE_DOUBLE:
			zephir_array_add(ret, "data-type", zephir_new_string("double"));
			break;

		case ZEPHIR_T_TYPE_BOOL:
			zephir_array_add(ret, "data-type", zephir_new_string("bool"));
			break;

		case ZEPHIR_T_TYPE_STRING:
			zephir_array_add(ret, "data-type", zephir_new_string("string"));
			break;

		case ZEPHIR_T_TYPE_ARRAY:
			zephir_array_add(ret, "data-type", zephir_new_string("array"));
			break;

		case ZEPHIR_T_TYPE_VAR:
			zephir_array_add(ret, "data-type", zephir_new_string("variable"));
			break;

	    case ZEPHIR_T_TYPE_CALLABLE:
            zephir_array_add(ret, "data-type", zephir_new_string("callable"));
            break;

        case ZEPHIR_T_TYPE_RESOURCE:
            zephir_array_add(ret, "data-type", zephir_new_string("resource"));
            break;

        case ZEPHIR_T_TYPE_OBJECT:
            zephir_array_add(ret, "data-type", zephir_new_string("object"));
            break;

		default:
			fprintf(stderr, "err 2?\n");
	}

	zephir_array_add(ret, "variables", variables);

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_declare_variable(zephir_parser_token *T, zval *expr, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "variable", zephir_new_string(T->token));
	if (expr) {
		zephir_array_add(ret, "expr", expr);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(T->token);
	efree(T);

	return ret;
}

static zval *zephir_ret_new_instance(int dynamic, zephir_parser_token *T, zval *parameters, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("new"));
	zephir_array_add(ret, "class", zephir_new_string(T->token));
	zephir_array_add(ret, "dynamic", zephir_new_int(dynamic));

	if (parameters) {
		zephir_array_add(ret, "parameters", parameters);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(T->token);
	efree(T);

	return ret;
}

static zval *zephir_ret_throw_exception(zval *expr, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("throw"));
	if (expr) {
		zephir_array_add(ret, "expr", expr);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_fcall(int type, zephir_parser_token *F, zval *parameters, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("fcall"));
	zephir_array_add(ret, "name", zephir_new_string(F->token));
	zephir_array_add(ret, "call-type", zephir_new_int(type));

	if (parameters) {
		zephir_array_add(ret, "parameters", parameters);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_mcall(int type, zval *O, zephir_parser_token *M, zval *parameters, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("mcall"));
	zephir_array_add(ret, "variable", O);
	zephir_array_add(ret, "name", zephir_new_string(M->token));
	zephir_array_add(ret, "call-type", zephir_new_int(type));

	if (parameters) {
		zephir_array_add(ret, "parameters", parameters);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_scall(int dynamic_class, zephir_parser_token *O, int dynamic_method, zephir_parser_token *M, zval *parameters, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("scall"));
	zephir_array_add(ret, "dynamic-class", zephir_new_int(dynamic_class));
	zephir_array_add(ret, "class", zephir_new_string(O->token));
	zephir_array_add(ret, "dynamic", zephir_new_int(dynamic_method));
	zephir_array_add(ret, "name", zephir_new_string(M->token));

	if (parameters) {
		zephir_array_add(ret, "parameters", parameters);
	}

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_call_parameter(zephir_parser_token *N, zval *parameter, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	if (N) {
		zephir_array_add(ret, "name", zephir_new_string(N->token));
	}
	zephir_array_add(ret, "parameter", parameter);

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	return ret;
}

static zval *zephir_ret_comment(zephir_parser_token *T, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("comment"));
	zephir_array_add(ret, "value", zephir_new_string(T->token));

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(T->token);
	efree(T);

	return ret;
}

static zval *zephir_ret_cblock(zephir_parser_token *T, zephir_scanner_state *state)
{
	zval *ret = zephir_new_array();

	zephir_array_add(ret, "type", zephir_new_string("cblock"));
	zephir_array_add(ret, "value", zephir_new_string(T->token));

	zephir_add_active_file(ret, state);
	zephir_add_active_line(ret, state);
	zephir_add_active_char(ret, state);

	efree(T->token);
	efree(T);

	return ret;
}

}

%syntax_error {

	//fprintf(stderr, "error!\n");

	//zval *syntax_error = json_object_new_object();

	//zephir_array_add(syntax_error, "type", zephir_new_string("error"));

	if (status->scanner_state->start_length) {
		fprintf(stderr, "Syntax error, %s", status->scanner_state->start);
	} else {
		fprintf(stderr, "EOF");
	}

	//status->syntax_error_len = 48 + Z_STRLEN_P(status->scanner_state->active_file);
	//status->syntax_error = emalloc(sizeof(char) * status->syntax_error_len);

	if (status->scanner_state->start_length) {
		//zephir_array_add(syntax_error, "message", zephir_new_string("Syntax error"));
	} else {
		//zephir_array_add(syntax_error, "message", zephir_new_string("Unexpected EOF"));
	}

	//zephir_array_add(syntax_error, "file", zephir_new_string(status->scanner_state->active_file));
	//zephir_array_add(syntax_error, "line", zephir_new_int(status->scanner_state->active_line));
	//zephir_array_add(syntax_error, "char", zephir_new_int(status->scanner_state->active_char));

	status->status = ZEPHIR_PARSING_FAILED;
	//status->ret = syntax_error;

	//status->scanner_state->active_file
}

%token_destructor {
	if ($$) {
		if ($$->free_flag) {
			efree($$->token);
		}
		efree($$);
	}
}

program ::= zephir_language(Q) . {
	status->ret = Q;
}

%destructor zephir_language { zval_ptr_dtor(&$$); }

zephir_language(R) ::= zephir_top_statement_list(L) . {
	R = L;
}

zephir_top_statement_list(R) ::= zephir_top_statement_list(L) zephir_top_statement(T) . {
	R = zephir_ret_list(L, T);
}

zephir_top_statement_list(R) ::= zephir_top_statement(T) . {
	R = zephir_ret_list(NULL, T);
}

zephir_top_statement(R) ::= zephir_namespace_def(T) . {
	R = T;
}

zephir_top_statement(R) ::= zephir_use_aliases(T) . {
	R = T;
}

zephir_top_statement(R) ::= zephir_class_def(T) . {
	R = T;
}

zephir_top_statement(R) ::= zephir_interface_def(T) . {
	R = T;
}

zephir_top_statement(R) ::= zephir_comment(T) . {
	R = T;
}

zephir_top_statement(R) ::= zephir_cblock(T) . {
	R = T;
}

zephir_namespace_def(R) ::= NAMESPACE IDENTIFIER(I) DOTCOMMA . {
	R = zephir_ret_namespace(I, status->scanner_state);
}

zephir_namespace_def(R) ::= USE zephir_use_aliases_list(L) DOTCOMMA . {
	R = zephir_ret_use_aliases(L, status->scanner_state);
}

zephir_use_aliases_list(R) ::= zephir_use_aliases_list(L) COMMA zephir_use_aliases(U) . {
	R = zephir_ret_list(L, U);
}

zephir_use_aliases_list(R) ::= zephir_use_aliases(U) . {
	R = zephir_ret_list(NULL, U);
}

zephir_use_aliases(R) ::= IDENTIFIER(I) . {
	R = zephir_ret_use_aliases_item(I, NULL, status->scanner_state);
}

zephir_use_aliases(R) ::= IDENTIFIER(I) AS IDENTIFIER(A) . {
	R = zephir_ret_use_aliases_item(I, A, status->scanner_state);
}

zephir_interface_def(R) ::= INTERFACE IDENTIFIER(I) zephir_interface_body(B) . {
	R = zephir_ret_interface(I, B, NULL, status->scanner_state);
}

zephir_interface_def(R) ::= INTERFACE IDENTIFIER(I) EXTENDS IDENTIFIER(E) zephir_interface_body(B) . {
	R = zephir_ret_interface(I, B, E, status->scanner_state);
}

zephir_class_def(R) ::= CLASS IDENTIFIER(I) zephir_class_body(B) . {
	R = zephir_ret_class(I, B, 0, 0, NULL, NULL, status->scanner_state);
}

zephir_class_def(R) ::= CLASS IDENTIFIER(I) EXTENDS IDENTIFIER(E) zephir_class_body(B) . {
	R = zephir_ret_class(I, B, 0, 0, E, NULL, status->scanner_state);
}

zephir_class_def(R) ::= CLASS IDENTIFIER(I) IMPLEMENTS zephir_implements_list(L) zephir_class_body(B) . {
	R = zephir_ret_class(I, B, 0, 0, NULL, L, status->scanner_state);
}

zephir_class_def(R) ::= CLASS IDENTIFIER(I) EXTENDS IDENTIFIER(E) IMPLEMENTS zephir_implements_list(L) zephir_class_body(B) . {
	R = zephir_ret_class(I, B, 0, 0, E, L, status->scanner_state);
}

zephir_class_def(R) ::= ABSTRACT CLASS IDENTIFIER(I) zephir_class_body(B) . {
	R = zephir_ret_class(I, B, 1, 0, NULL, NULL, status->scanner_state);
}

zephir_class_def(R) ::= ABSTRACT CLASS IDENTIFIER(I) EXTENDS IDENTIFIER(E) zephir_class_body(B) . {
	R = zephir_ret_class(I, B, 1, 0, E, NULL, status->scanner_state);
}

zephir_class_def(R) ::= ABSTRACT CLASS IDENTIFIER(I) IMPLEMENTS zephir_implements_list(L) zephir_class_body(B) . {
	R = zephir_ret_class(I, B, 1, 0, NULL, L, status->scanner_state);
}

zephir_class_def(R) ::= ABSTRACT CLASS IDENTIFIER(I) EXTENDS IDENTIFIER(E) IMPLEMENTS zephir_implements_list(L) zephir_class_body(B) . {
	R = zephir_ret_class(I, B, 1, 0, E, L, status->scanner_state);
}

zephir_class_def(R) ::= FINAL CLASS IDENTIFIER(I) zephir_class_body(B) . {
	R = zephir_ret_class(I, B, 0, 1, NULL, NULL, status->scanner_state);
}

zephir_class_def(R) ::= FINAL CLASS IDENTIFIER(I) EXTENDS IDENTIFIER(E) zephir_class_body(B) . {
	R = zephir_ret_class(I, B, 0, 1, E, NULL, status->scanner_state);
}

zephir_class_body(R) ::= BRACKET_OPEN BRACKET_CLOSE . {
	R = NULL;
}

zephir_class_body(R) ::= BRACKET_OPEN zephir_class_definition(C) BRACKET_CLOSE . {
	R = C;
}

zephir_implements_list(R) ::= zephir_implements_list(L) COMMA zephir_implements(I) . {
	R = zephir_ret_list(L, I);
}

zephir_implements_list(R) ::= zephir_implements(I) . {
	R = zephir_ret_list(NULL, I);
}

zephir_implements(R) ::= IDENTIFIER(I) . {
	R = zephir_ret_literal(ZEPHIR_T_IDENTIFIER, I, status->scanner_state);
}

zephir_interface_body(R) ::= BRACKET_OPEN BRACKET_CLOSE . {
  R = NULL;
}

zephir_interface_body(R) ::= BRACKET_OPEN zephir_interface_definition(D) BRACKET_CLOSE . {
  R = D;
}

zephir_class_definition(R) ::= zephir_class_properties_definition(C) . {
	R = zephir_ret_class_definition(C, NULL, NULL, status->scanner_state);
}

zephir_class_definition(R) ::= zephir_class_consts_definition(C) . {
	R = zephir_ret_class_definition(NULL, NULL, C, status->scanner_state);
}

zephir_class_definition(R) ::= zephir_class_methods_definition(M) . {
	R = zephir_ret_class_definition(NULL, M, NULL, status->scanner_state);
}

zephir_class_definition(R) ::= zephir_class_properties_definition(C) zephir_class_methods_definition(M) . {
	R = zephir_ret_class_definition(C, M, NULL, status->scanner_state);
}

zephir_class_definition(R) ::= zephir_class_properties_definition(C) zephir_class_consts_definition(K) . {
	R = zephir_ret_class_definition(C, NULL, K, status->scanner_state);
}

zephir_class_definition(R) ::= zephir_class_consts_definition(K) zephir_class_properties_definition(C) . {
	R = zephir_ret_class_definition(C, NULL, K, status->scanner_state);
}

zephir_class_definition(R) ::= zephir_class_consts_definition(K) zephir_class_methods_definition(M) . {
	R = zephir_ret_class_definition(NULL, M, K, status->scanner_state);
}

zephir_class_definition(R) ::= zephir_class_properties_definition(C) zephir_class_consts_definition(K) zephir_class_methods_definition(M) . {
	R = zephir_ret_class_definition(C, M, K, status->scanner_state);
}

zephir_class_definition(R) ::= zephir_class_consts_definition(K) zephir_class_properties_definition(C) zephir_class_methods_definition(M) . {
	R = zephir_ret_class_definition(C, M, K, status->scanner_state);
}

zephir_interface_definition(R) ::= zephir_class_consts_definition(C) . {
  R = zephir_ret_interface_definition(NULL, C, status->scanner_state);
}

zephir_interface_definition(R) ::= zephir_interface_methods_definition(M) . {
  R = zephir_ret_interface_definition(M, NULL, status->scanner_state);
}

zephir_interface_definition(R) ::= zephir_class_consts_definition(C) zephir_interface_methods_definition(M) . {
  R = zephir_ret_interface_definition(M, C, status->scanner_state);
}

zephir_class_properties_definition(R) ::= zephir_class_properties_definition(L) zephir_class_property_definition(P) . {
	R = zephir_ret_list(L, P);
}

zephir_class_properties_definition(R) ::= zephir_class_property_definition(P) . {
	R = zephir_ret_list(NULL, P);
}

/* property definition */
zephir_class_property_definition(R) ::= COMMENT(C) zephir_visibility_list(V) IDENTIFIER(I) DOTCOMMA . {
	R = zephir_ret_class_property(V, I, NULL, C, NULL, status->scanner_state);
}

zephir_class_property_definition(R) ::= zephir_visibility_list(V) IDENTIFIER(I) DOTCOMMA . {
	R = zephir_ret_class_property(V, I, NULL, NULL, NULL, status->scanner_state);
}

zephir_class_property_definition(R) ::= COMMENT(C) zephir_visibility_list(V) IDENTIFIER(I) ASSIGN zephir_literal_expr(E) DOTCOMMA . {
	R = zephir_ret_class_property(V, I, E, C, NULL, status->scanner_state);
}

zephir_class_property_definition(R) ::=  zephir_visibility_list(V) IDENTIFIER(I) ASSIGN zephir_literal_expr(E) DOTCOMMA . {
	R = zephir_ret_class_property(V, I, E, NULL, NULL, status->scanner_state);
}

zephir_class_property_definition(R) ::= COMMENT(C) zephir_visibility_list(V) IDENTIFIER(I) zephir_class_property_shortcuts(S) DOTCOMMA . {
	R = zephir_ret_class_property(V, I, NULL, C, S, status->scanner_state);
}

zephir_class_property_definition(R) ::= zephir_visibility_list(V) IDENTIFIER(I) zephir_class_property_shortcuts(S) DOTCOMMA . {
	R = zephir_ret_class_property(V, I, NULL, NULL, S, status->scanner_state);
}

zephir_class_property_definition(R) ::= COMMENT(C) zephir_visibility_list(V) IDENTIFIER(I) ASSIGN zephir_literal_expr(E) zephir_class_property_shortcuts(S) DOTCOMMA . {
	R = zephir_ret_class_property(V, I, E, C, S, status->scanner_state);
}

zephir_class_property_definition(R) ::=  zephir_visibility_list(V) IDENTIFIER(I) ASSIGN zephir_literal_expr(E) zephir_class_property_shortcuts(S) DOTCOMMA . {
	R = zephir_ret_class_property(V, I, E, NULL, S, status->scanner_state);
}

zephir_class_property_shortcuts(R) ::= BRACKET_OPEN BRACKET_CLOSE . {
	R = NULL;
}

zephir_class_property_shortcuts(R) ::= BRACKET_OPEN zephir_class_property_shortcuts_list(L) BRACKET_CLOSE . {
	R = L;
}

zephir_class_property_shortcuts_list(R) ::= zephir_class_property_shortcuts_list(L) COMMA zephir_class_property_shortcut(S) . {
	R = zephir_ret_list(L, S);
}

zephir_class_property_shortcuts_list(R) ::= zephir_class_property_shortcut(S) . {
	R = zephir_ret_list(NULL, S);
}

zephir_class_property_shortcut(R) ::= IDENTIFIER(D) . {
	R = zephir_ret_property_shortcut(NULL, D, status->scanner_state);
}

zephir_class_property_shortcut(R) ::= COMMENT(C) IDENTIFIER(D) . {
	R = zephir_ret_property_shortcut(C, D, status->scanner_state);
}

/* constants definition */
zephir_class_consts_definition(R) ::= zephir_class_consts_definition(L) zephir_class_const_definition(K) . {
	R = zephir_ret_list(L, K);
}

zephir_class_consts_definition(R) ::= zephir_class_const_definition(K) . {
	R = zephir_ret_list(NULL, K);
}

zephir_class_methods_definition(R) ::= zephir_class_methods_definition(L) zephir_class_method_definition(P) . {
	R = zephir_ret_list(L, P);
}

zephir_class_methods_definition(R) ::= zephir_class_method_definition(P) . {
	R = zephir_ret_list(NULL, P);
}

zephir_interface_methods_definition(R) ::= zephir_interface_methods_definition(L) zephir_interface_method_definition(P) . {
	R = zephir_ret_list(L, P);
}

zephir_interface_methods_definition(R) ::= zephir_interface_method_definition(P) . {
	R = zephir_ret_list(NULL, P);
}

zephir_class_const_definition(R) ::= COMMENT(C) CONST CONSTANT(I) ASSIGN zephir_literal_expr(E) DOTCOMMA . {
	R = zephir_ret_class_const(I, E, C, status->scanner_state);
}

zephir_class_const_definition(R) ::= CONST CONSTANT(I) ASSIGN zephir_literal_expr(E) DOTCOMMA . {
	R = zephir_ret_class_const(I, E, NULL, status->scanner_state);
}

/** method definition */
zephir_class_method_definition(R) ::= zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, NULL, NULL, NULL, NULL, status->scanner_state);
}

zephir_class_method_definition(R) ::= zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN zephir_parameter_list(L) PARENTHESES_CLOSE BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, L, NULL, NULL, NULL, status->scanner_state);
}

zephir_class_method_definition(R) ::= zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE BRACKET_OPEN zephir_statement_list(S) BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, NULL, S, NULL, NULL, status->scanner_state);
}

zephir_class_method_definition(R) ::= zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN zephir_parameter_list(L) PARENTHESES_CLOSE BRACKET_OPEN zephir_statement_list(S) BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, L, S, NULL, NULL, status->scanner_state);
}

zephir_class_method_definition(R) ::= COMMENT(C) zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, NULL, NULL, C, NULL, status->scanner_state);
}

zephir_class_method_definition(R) ::= COMMENT(C) zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN zephir_parameter_list(L) PARENTHESES_CLOSE BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, L, NULL, C, NULL, status->scanner_state);
}

zephir_class_method_definition(R) ::= COMMENT(C) zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE BRACKET_OPEN zephir_statement_list(S) BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, NULL, S, C, NULL, status->scanner_state);
}

zephir_class_method_definition(R) ::= COMMENT(C) zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN zephir_parameter_list(L) PARENTHESES_CLOSE BRACKET_OPEN zephir_statement_list(S) BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, L, S, C, NULL, status->scanner_state);
}

zephir_class_method_definition(R) ::= zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE ARROW zephir_method_return_type(T) BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, NULL, NULL, NULL, T, status->scanner_state);
}

zephir_class_method_definition(R) ::= zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN zephir_parameter_list(L) PARENTHESES_CLOSE ARROW zephir_method_return_type(T) BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, L, NULL, NULL, T, status->scanner_state);
}

zephir_class_method_definition(R) ::= zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE ARROW zephir_method_return_type(T) BRACKET_OPEN zephir_statement_list(S) BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, NULL, S, NULL, T, status->scanner_state);
}

zephir_class_method_definition(R) ::= zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN zephir_parameter_list(L) PARENTHESES_CLOSE ARROW zephir_method_return_type(T) BRACKET_OPEN zephir_statement_list(S) BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, L, S, NULL, T, status->scanner_state);
}

zephir_class_method_definition(R) ::= COMMENT(C) zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE ARROW zephir_method_return_type(T) BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, NULL, NULL, C, T, status->scanner_state);
}

zephir_class_method_definition(R) ::= COMMENT(C) zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN zephir_parameter_list(L) PARENTHESES_CLOSE ARROW zephir_method_return_type(T) BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, L, NULL, C, T, status->scanner_state);
}

zephir_class_method_definition(R) ::= COMMENT(C) zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE ARROW zephir_method_return_type(T) BRACKET_OPEN zephir_statement_list(S) BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, NULL, S, C, T, status->scanner_state);
}

zephir_class_method_definition(R) ::= COMMENT(C) zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN zephir_parameter_list(L) PARENTHESES_CLOSE ARROW zephir_method_return_type(T) BRACKET_OPEN zephir_statement_list(S) BRACKET_CLOSE . {
	R = zephir_ret_class_method(V, I, L, S, C, T, status->scanner_state);
}

/* method definition */
zephir_interface_method_definition(R) ::= zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE ARROW zephir_method_return_type(T) DOTCOMMA . {
	R = zephir_ret_class_method(V, I, NULL, NULL, NULL, T, status->scanner_state);
}

zephir_interface_method_definition(R) ::= zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN zephir_parameter_list(L) PARENTHESES_CLOSE ARROW zephir_method_return_type(T) DOTCOMMA . {
	R = zephir_ret_class_method(V, I, L, NULL, NULL, T, status->scanner_state);
}

zephir_interface_method_definition(R) ::= COMMENT(C) zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE ARROW zephir_method_return_type(T) DOTCOMMA . {
	R = zephir_ret_class_method(V, I, NULL, NULL, C, T, status->scanner_state);
}

zephir_interface_method_definition(R) ::= COMMENT(C) zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN zephir_parameter_list(L) PARENTHESES_CLOSE ARROW zephir_method_return_type(T) DOTCOMMA . {
	R = zephir_ret_class_method(V, I, L, NULL, C, T, status->scanner_state);
}

zephir_interface_method_definition(R) ::= zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE DOTCOMMA . {
	R = zephir_ret_class_method(V, I, NULL, NULL, NULL, NULL, status->scanner_state);
}

zephir_interface_method_definition(R) ::= zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN zephir_parameter_list(L) PARENTHESES_CLOSE DOTCOMMA . {
	R = zephir_ret_class_method(V, I, L, NULL, NULL, NULL, status->scanner_state);
}

zephir_interface_method_definition(R) ::= COMMENT(C) zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE DOTCOMMA . {
	R = zephir_ret_class_method(V, I, NULL, NULL, C, NULL, status->scanner_state);
}

zephir_interface_method_definition(R) ::= COMMENT(C) zephir_visibility_list(V) FUNCTION IDENTIFIER(I) PARENTHESES_OPEN zephir_parameter_list(L) PARENTHESES_CLOSE DOTCOMMA . {
	R = zephir_ret_class_method(V, I, L, NULL, C, NULL, status->scanner_state);
}

/* visibility and modifiers */
zephir_visibility_list(R) ::= zephir_visibility_list(L) zephir_visibility(K) . {
	R = zephir_ret_list(L, K);
}

zephir_visibility_list(R) ::= zephir_visibility(K) . {
	R = zephir_ret_list(NULL, K);
}

zephir_visibility(R) ::= PUBLIC . {
	R = zephir_new_string("public");
}

zephir_visibility(R) ::= PROTECTED . {
	R = zephir_new_string("protected");
}

zephir_visibility(R) ::= PRIVATE. {
	R = zephir_new_string("private");
}

zephir_visibility(R) ::= STATIC . {
	R = zephir_new_string("static");
}

zephir_visibility(R) ::= SCOPED . {
	R = zephir_new_string("scoped");
}

zephir_visibility(R) ::= INLINE . {
	R = zephir_new_string("inline");
}

zephir_visibility(R) ::= ABSTRACT . {
	R = zephir_new_string("abstract");
}

zephir_visibility(R) ::= FINAL . {
	R = zephir_new_string("final");
}

/* return type */
zephir_method_return_type(R) ::= VOID . {
	R = zephir_ret_return_type(1, NULL, status->scanner_state);
}

zephir_method_return_type(R) ::= zephir_method_return_type_list(L) . {
	R = zephir_ret_return_type(0, L, status->scanner_state);
}

zephir_method_return_type_list(R) ::= zephir_method_return_type_list(L) BITWISE_OR zephir_method_return_type_item(I) . {
	R = zephir_ret_list(L, I);
}

zephir_method_return_type_list(R) ::= zephir_method_return_type_item(I) . {
	R = zephir_ret_list(NULL, I);
}

zephir_method_return_type_item(R) ::= zephir_parameter_type(T) . {
	R = zephir_ret_return_type_item(T, NULL, 0, 0, status->scanner_state);
}

zephir_method_return_type_item(R) ::= NULL . {
	R = zephir_ret_return_type_item(zephir_ret_type(ZEPHIR_T_TYPE_NULL), NULL, 0, 0, status->scanner_state);
}

zephir_method_return_type_item(R) ::= THIS . {
	R = zephir_ret_return_type_item(zephir_ret_type(ZEPHIR_T_TYPE_THIS), NULL, 0, 0, status->scanner_state);
}

zephir_method_return_type_item(R) ::= zephir_parameter_type(T) NOT . {
	R = zephir_ret_return_type_item(T, NULL, 1, 0, status->scanner_state);
}

zephir_method_return_type_item(R) ::= zephir_parameter_cast(T) . {
	R = zephir_ret_return_type_item(NULL, T, 0, 0, status->scanner_state);
}

zephir_method_return_type_item(R) ::= zephir_parameter_cast_collection(T) . {
	R = zephir_ret_return_type_item(NULL, T, 0, 1, status->scanner_state);
}

/* parameters list */
zephir_parameter_list(R) ::= zephir_parameter_list(L) COMMA zephir_parameter(P) . {
	R = zephir_ret_list(L, P);
}

zephir_parameter_list(R) ::= zephir_parameter(P) . {
	R = zephir_ret_list(NULL, P);
}

/* zephir_parameter_list */
zephir_parameter(R) ::= IDENTIFIER(I) . {
	R = zephir_ret_parameter(0, NULL, NULL, I, NULL, 0, status->scanner_state);
}

zephir_parameter(R) ::= CONST IDENTIFIER(I) . {
	R = zephir_ret_parameter(1, NULL, NULL, I, NULL, 0, status->scanner_state);
}

zephir_parameter(R) ::= zephir_parameter_type(T) IDENTIFIER(I) . {
	R = zephir_ret_parameter(0, T, NULL, I, NULL, 0, status->scanner_state);
}

zephir_parameter(R) ::= CONST zephir_parameter_type(T) IDENTIFIER(I) . {
	R = zephir_ret_parameter(1, T, NULL, I, NULL, 0, status->scanner_state);
}

zephir_parameter(R) ::= zephir_parameter_type(T) NOT IDENTIFIER(I) . {
	R = zephir_ret_parameter(0, T, NULL, I, NULL, 1, status->scanner_state);
}

zephir_parameter(R) ::= CONST zephir_parameter_type(T) NOT IDENTIFIER(I) . {
	R = zephir_ret_parameter(1, T, NULL, I, NULL, 1, status->scanner_state);
}

zephir_parameter(R) ::= zephir_parameter_cast(C) IDENTIFIER(I) . {
	R = zephir_ret_parameter(0, NULL, C, I, NULL, 0, status->scanner_state);
}

zephir_parameter(R) ::= CONST zephir_parameter_cast(C) IDENTIFIER(I) . {
	R = zephir_ret_parameter(1, NULL, C, I, NULL, 0, status->scanner_state);
}

zephir_parameter(R) ::= IDENTIFIER(I) ASSIGN zephir_literal_expr(E) . {
	R = zephir_ret_parameter(0, NULL, NULL, I, E, 0, status->scanner_state);
}

zephir_parameter(R) ::= CONST IDENTIFIER(I) ASSIGN zephir_literal_expr(E) . {
	R = zephir_ret_parameter(1, NULL, NULL, I, E, 0, status->scanner_state);
}

zephir_parameter(R) ::= zephir_parameter_type(T) IDENTIFIER(I) ASSIGN zephir_literal_expr(E) . {
	R = zephir_ret_parameter(0, T, NULL, I, E, 0, status->scanner_state);
}

zephir_parameter(R) ::= CONST zephir_parameter_type(T) IDENTIFIER(I) ASSIGN zephir_literal_expr(E) . {
	R = zephir_ret_parameter(1, T, NULL, I, E, 0, status->scanner_state);
}

zephir_parameter(R) ::= zephir_parameter_type(T) NOT IDENTIFIER(I) ASSIGN zephir_literal_expr(E) . {
	R = zephir_ret_parameter(0, T, NULL, I, E, 1, status->scanner_state);
}

zephir_parameter(R) ::= CONST zephir_parameter_type(T) NOT IDENTIFIER(I) ASSIGN zephir_literal_expr(E) . {
	R = zephir_ret_parameter(1, T, NULL, I, E, 1, status->scanner_state);
}

zephir_parameter(R) ::= zephir_parameter_cast(C) IDENTIFIER(I) ASSIGN zephir_literal_expr(E) . {
	R = zephir_ret_parameter(0, NULL, C, I, E, 0, status->scanner_state);
}

zephir_parameter(R) ::= CONST zephir_parameter_cast(C) IDENTIFIER(I) ASSIGN zephir_literal_expr(E) . {
	R = zephir_ret_parameter(1, NULL, C, I, E, 0, status->scanner_state);
}

/* zephir_parameter_cast */
zephir_parameter_cast(R) ::= LESS IDENTIFIER(I) GREATER . {
	R = zephir_ret_literal(ZEPHIR_T_IDENTIFIER, I, status->scanner_state);
}

zephir_parameter_cast_collection(R) ::= LESS IDENTIFIER(I) SBRACKET_OPEN SBRACKET_CLOSE GREATER . {
	R = zephir_ret_literal(ZEPHIR_T_IDENTIFIER, I, status->scanner_state);
}

zephir_parameter_type(R) ::= TYPE_INTEGER . {
	R = zephir_ret_type(ZEPHIR_TYPE_INTEGER);
}

zephir_parameter_type(R) ::= TYPE_UINTEGER . {
	R = zephir_ret_type(ZEPHIR_TYPE_UINTEGER);
}

zephir_parameter_type(R) ::= TYPE_LONG . {
	R = zephir_ret_type(ZEPHIR_TYPE_LONG);
}

zephir_parameter_type(R) ::= TYPE_ULONG . {
	R = zephir_ret_type(ZEPHIR_TYPE_ULONG);
}

zephir_parameter_type(R) ::= TYPE_CHAR . {
	R = zephir_ret_type(ZEPHIR_TYPE_CHAR);
}

zephir_parameter_type(R) ::= TYPE_UCHAR . {
	R = zephir_ret_type(ZEPHIR_TYPE_UCHAR);
}

zephir_parameter_type(R) ::= TYPE_DOUBLE . {
	R = zephir_ret_type(ZEPHIR_TYPE_DOUBLE);
}

zephir_parameter_type(R) ::= TYPE_BOOL . {
	R = zephir_ret_type(ZEPHIR_TYPE_BOOL);
}

zephir_parameter_type(R) ::= TYPE_STRING . {
	R = zephir_ret_type(ZEPHIR_TYPE_STRING);
}

zephir_parameter_type(R) ::= TYPE_ARRAY . {
	R = zephir_ret_type(ZEPHIR_TYPE_ARRAY);
}

zephir_parameter_type(R) ::= TYPE_VAR . {
	R = zephir_ret_type(ZEPHIR_TYPE_VAR);
}

zephir_parameter_type(R) ::= TYPE_CALLABLE . {
	R = zephir_ret_type(ZEPHIR_TYPE_CALLABLE);
}

zephir_parameter_type(R) ::= TYPE_RESOURCE . {
	R = zephir_ret_type(ZEPHIR_TYPE_RESOURCE);
}

zephir_parameter_type(R) ::= TYPE_OBJECT . {
	R = zephir_ret_type(ZEPHIR_TYPE_OBJECT);
}

zephir_statement_list(R) ::= zephir_statement_list(L) zephir_statement(S) . {
	R = zephir_ret_list(L, S);
}

zephir_statement_list(R) ::= zephir_statement(S) . {
	R = zephir_ret_list(NULL, S);
}

zephir_statement(R) ::= zephir_cblock(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_let_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_if_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_loop_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_echo_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_return_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_require_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_fetch_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_fcall_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_mcall_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_scall_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_unset_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_throw_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_declare_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_break_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_continue_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_while_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_do_while_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_try_catch_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_switch_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_for_statement(S) . {
	R = S;
}

zephir_statement(R) ::= zephir_comment(S) . {
	R = S;
}



zephir_statement(R) ::= zephir_empty_statement(S) . {
	R = S;
}

zephir_empty_statement(R) ::= DOTCOMMA . {
	R = zephir_ret_empty_statement(status->scanner_state);
}

zephir_break_statement(R) ::= BREAK DOTCOMMA . {
	R = zephir_ret_break_statement(status->scanner_state);
}

zephir_continue_statement(R) ::= CONTINUE DOTCOMMA . {
	R = zephir_ret_continue_statement(status->scanner_state);
}

zephir_if_statement(R) ::= IF zephir_eval_expr(E) BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_if_statement(E, NULL, NULL, status->scanner_state);
}

zephir_if_statement(R) ::= IF zephir_eval_expr(E) BRACKET_OPEN BRACKET_CLOSE ELSE BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_if_statement(E, NULL, NULL, status->scanner_state);
}

zephir_if_statement(R) ::= IF zephir_eval_expr(E) BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE . {
	R = zephir_ret_if_statement(E, L, NULL, status->scanner_state);
}

zephir_if_statement(R) ::= IF zephir_eval_expr(E) BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE ELSE BRACKET_OPEN zephir_statement_list(S) BRACKET_CLOSE . {
	R = zephir_ret_if_statement(E, L, S, status->scanner_state);
}

zephir_if_statement(R) ::= IF zephir_eval_expr(E) BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE ELSE BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_if_statement(E, L, NULL, status->scanner_state);
}

zephir_if_statement(R) ::= IF zephir_eval_expr(E) BRACKET_OPEN BRACKET_CLOSE ELSE BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE . {
	R = zephir_ret_if_statement(E, NULL, L, status->scanner_state);
}

zephir_switch_statement(R) ::= SWITCH zephir_eval_expr(E) BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_switch_statement(E, NULL, status->scanner_state);
}

zephir_switch_statement(R) ::= SWITCH zephir_eval_expr(E) BRACKET_OPEN zephir_case_clauses(C) BRACKET_CLOSE . {
	R = zephir_ret_switch_statement(E, C, status->scanner_state);
}

zephir_case_clauses(R) ::= zephir_case_clauses(C) zephir_case_clause(K) . {
	R = zephir_ret_list(C, K);
}

zephir_case_clauses(R) ::= zephir_case_clause(K) . {
	R = zephir_ret_list(NULL, K);
}

zephir_case_clause(R) ::= CASE zephir_literal_expr(E) COLON . {
	R = zephir_ret_case_clause(E, NULL, status->scanner_state);
}

zephir_case_clause(R) ::= CASE zephir_literal_expr(E) COLON zephir_statement_list(L) . {
	R = zephir_ret_case_clause(E, L, status->scanner_state);
}

zephir_case_clause(R) ::= DEFAULT COLON zephir_statement_list(L) . {
	R = zephir_ret_case_clause(NULL, L, status->scanner_state);
}

zephir_loop_statement(R) ::= LOOP BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_loop_statement(NULL, status->scanner_state);
}

zephir_loop_statement(R) ::= LOOP BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE . {
	R = zephir_ret_loop_statement(L, status->scanner_state);
}

zephir_while_statement(R) ::= WHILE zephir_eval_expr(E) BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_while_statement(E, NULL, status->scanner_state);
}

zephir_while_statement(R) ::= WHILE zephir_eval_expr(E) BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE . {
	R = zephir_ret_while_statement(E, L, status->scanner_state);
}

zephir_do_while_statement(R) ::= DO BRACKET_OPEN BRACKET_CLOSE WHILE zephir_eval_expr(E) DOTCOMMA . {
	R = zephir_ret_do_while_statement(E, NULL, status->scanner_state);
}

zephir_do_while_statement(R) ::= DO BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE WHILE zephir_eval_expr(E) DOTCOMMA . {
	R = zephir_ret_do_while_statement(E, L, status->scanner_state);
}

zephir_try_catch_statement(R) ::= TRY BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_try_catch_statement(NULL, NULL, status->scanner_state);
}

zephir_try_catch_statement(R) ::= TRY BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE . {
	R = zephir_ret_try_catch_statement(L, NULL, status->scanner_state);
}

zephir_try_catch_statement(R) ::= TRY BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE zephir_catch_statement_list(C) . {
	R = zephir_ret_try_catch_statement(L, C, status->scanner_state);
}

zephir_catch_statement_list(R) ::= zephir_catch_statement_list(L) zephir_catch_statement(C) . {
	R = zephir_ret_list(L, C);
}

zephir_catch_statement_list(R) ::= zephir_catch_statement(C) . {
	R = zephir_ret_list(NULL, C);
}

zephir_catch_statement(R) ::= CATCH zephir_catch_classes_list(E) BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE . {
	R = zephir_ret_catch_statement(E, NULL, L, status->scanner_state);
}

zephir_catch_statement(R) ::= CATCH zephir_catch_classes_list(E) BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_catch_statement(E, NULL, NULL, status->scanner_state);
}

zephir_catch_statement(R) ::= CATCH zephir_catch_classes_list(E) COMMA IDENTIFIER(V) BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_catch_statement(E, zephir_ret_literal(ZEPHIR_T_IDENTIFIER, V, status->scanner_state), NULL, status->scanner_state);
}

zephir_catch_statement(R) ::= CATCH zephir_catch_classes_list(E) COMMA IDENTIFIER(V) BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE . {
	R = zephir_ret_catch_statement(E, zephir_ret_literal(ZEPHIR_T_IDENTIFIER, V, status->scanner_state), L, status->scanner_state);
}

zephir_catch_classes_list(R) ::= zephir_catch_classes_list(L) BITWISE_OR zephir_catch_class(C) . {
	R = zephir_ret_list(L, C);
}

zephir_catch_classes_list(R) ::= zephir_catch_class(C) . {
	R = zephir_ret_list(NULL, C);
}

zephir_catch_class(R) ::= IDENTIFIER(C) . {
	R = zephir_ret_literal(ZEPHIR_T_IDENTIFIER, C, status->scanner_state);
}

zephir_for_statement(R) ::= FOR IDENTIFIER(V) IN zephir_common_expr(E) BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE . {
	R = zephir_ret_for_statement(E, NULL, V, 0, L, status->scanner_state);
}

zephir_for_statement(R) ::= FOR IDENTIFIER(V) IN zephir_common_expr(E) BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_for_statement(E, NULL, V, 0, NULL, status->scanner_state);
}

zephir_for_statement(R) ::= FOR IDENTIFIER(V) IN REVERSE zephir_common_expr(E) BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE . {
	R = zephir_ret_for_statement(E, NULL, V, 1, L, status->scanner_state);
}

zephir_for_statement(R) ::= FOR IDENTIFIER(K) COMMA IDENTIFIER(V) IN zephir_common_expr(E) BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE . {
	R = zephir_ret_for_statement(E, K, V, 0, L, status->scanner_state);
}

zephir_for_statement(R) ::= FOR IDENTIFIER(K) COMMA IDENTIFIER(V) IN zephir_common_expr(E) BRACKET_OPEN BRACKET_CLOSE . {
	R = zephir_ret_for_statement(E, K, V, 0, NULL, status->scanner_state);
}

zephir_for_statement(R) ::= FOR IDENTIFIER(K) COMMA IDENTIFIER(V) IN REVERSE zephir_common_expr(E) BRACKET_OPEN zephir_statement_list(L) BRACKET_CLOSE . {
	R = zephir_ret_for_statement(E, K, V, 1, L, status->scanner_state);
}

zephir_let_statement(R) ::= LET zephir_let_assignments(A) DOTCOMMA . {
	R = zephir_ret_let_statement(A, status->scanner_state);
}

zephir_let_assignments(R) ::= zephir_let_assignments(L) COMMA zephir_let_assignment(A) . {
	R = zephir_ret_list(L, A);
}

zephir_let_assignments(R) ::= zephir_let_assignment(A) . {
	R = zephir_ret_list(NULL, A);
}

/* */
zephir_assignment_operator(R) ::= ASSIGN . {
	R = zephir_new_string("assign");
}

/* */
zephir_assignment_operator(R) ::= ADDASSIGN . {
	R = zephir_new_string("add-assign");
}

/* */
zephir_assignment_operator(R) ::= SUBASSIGN . {
	R = zephir_new_string("sub-assign");
}

zephir_assignment_operator(R) ::= MULASSIGN . {
	R = zephir_new_string("mul-assign");
}

zephir_assignment_operator(R) ::= DIVASSIGN . {
	R = zephir_new_string("div-assign");
}

zephir_assignment_operator(R) ::= CONCATASSIGN . {
	R = zephir_new_string("concat-assign");
}

zephir_assignment_operator(R) ::= MODASSIGN . {
	R = zephir_new_string("mod-assign");
}

/* y = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(I) zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("variable", O, I, NULL, NULL, E, status->scanner_state);
}

/* y->x = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(D) ARROW IDENTIFIER(I) zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("object-property", O, D, I, NULL, E, status->scanner_state);
}

/* y->{x} = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(D) ARROW BRACKET_OPEN IDENTIFIER(I) BRACKET_CLOSE zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("variable-dynamic-object-property", O, D, I, NULL, E, status->scanner_state);
}

/* y->{"x"} = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(D) ARROW BRACKET_OPEN STRING(S) BRACKET_CLOSE zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("string-dynamic-object-property", O, D, S, NULL, E, status->scanner_state);
}

/* y->x[] = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(D) ARROW IDENTIFIER(I) SBRACKET_OPEN SBRACKET_CLOSE zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("object-property-append", O, D, I, NULL, E, status->scanner_state);
}

/* y->x[z][] = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(D) ARROW IDENTIFIER(I) zephir_array_offset_list(X) zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("object-property-array-index", O, D, I, X, E, status->scanner_state);
}

zephir_let_assignment(R) ::= IDENTIFIER(D) ARROW IDENTIFIER(I) zephir_array_offset_list(X) SBRACKET_OPEN SBRACKET_CLOSE zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("object-property-array-index-append", O, D, I, X, E, status->scanner_state);
}

/* y::x = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(D) DOUBLECOLON IDENTIFIER(I) zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("static-property", O, D, I, NULL, E, status->scanner_state);
}

/* y::x[] = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(D) DOUBLECOLON IDENTIFIER(I) SBRACKET_OPEN SBRACKET_CLOSE zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("static-property-append", O, D, I, NULL, E, status->scanner_state);
}

/* y::x[z] = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(D) DOUBLECOLON IDENTIFIER(I) zephir_array_offset_list(X) zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("static-property-array-index", O, D, I, X, E, status->scanner_state);
}

/* y::x[z][] = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(D) DOUBLECOLON IDENTIFIER(I) zephir_array_offset_list(X) SBRACKET_OPEN SBRACKET_CLOSE zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("static-property-array-index-append", O, D, I, X, E, status->scanner_state);
}

/* y[] = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(I) SBRACKET_OPEN SBRACKET_CLOSE zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("variable-append", O, I, NULL, NULL, E, status->scanner_state);
}

/* y[x] = {expr} | y[x][z] = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(D) zephir_array_offset_list(A) zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("array-index", O, D, NULL, A, E, status->scanner_state);
}

/* y[x][] = {expr} | y[x][z][] = {expr} */
zephir_let_assignment(R) ::= IDENTIFIER(D) zephir_array_offset_list(A) SBRACKET_OPEN SBRACKET_CLOSE zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("array-index-append", O, D, NULL, A, E, status->scanner_state);
}

zephir_array_offset_list(R) ::= zephir_array_offset_list(L) zephir_array_offset(O) . {
	R = zephir_ret_list(L, O);
}

zephir_array_offset_list(R) ::= zephir_array_offset(O) . {
	R = zephir_ret_list(NULL, O);
}

zephir_array_offset(R) ::= SBRACKET_OPEN zephir_index_expr(I) SBRACKET_CLOSE . {
	R = I;
}

/* t->y++ */
zephir_let_assignment(R) ::= IDENTIFIER(D) ARROW IDENTIFIER(I) INCR . {
	R = zephir_ret_let_assignment("object-property-incr", NULL, D, I, NULL, NULL, status->scanner_state);
}

/* t->y-- */
zephir_let_assignment(R) ::= IDENTIFIER(D) ARROW IDENTIFIER(I) DECR . {
	R = zephir_ret_let_assignment("object-property-decr", NULL, D, I, NULL, NULL, status->scanner_state);
}

/* y++ */
zephir_let_assignment(R) ::= IDENTIFIER(I) INCR . {
	R = zephir_ret_let_assignment("incr", NULL, I, NULL, NULL, NULL, status->scanner_state);
}

/* y-- */
zephir_let_assignment(R) ::= IDENTIFIER(I) DECR . {
	R = zephir_ret_let_assignment("decr", NULL, I, NULL, NULL, NULL, status->scanner_state);
}

/* {y} = {expr} */
zephir_let_assignment(R) ::= BRACKET_OPEN IDENTIFIER(I) BRACKET_CLOSE zephir_assignment_operator(O) zephir_assign_expr(E) . {
	R = zephir_ret_let_assignment("dynamic-variable", O, I, NULL, NULL, E, status->scanner_state);
}

zephir_index_expr(R) ::= zephir_common_expr(E) . {
	R = E;
}

zephir_echo_statement(R) ::= ECHO zephir_echo_expressions(E) DOTCOMMA . {
	R = zephir_ret_echo_statement(E, status->scanner_state);
}

zephir_echo_expressions(R) ::= zephir_echo_expressions(L) COMMA zephir_echo_expression(A) . {
	R = zephir_ret_list(L, A);
}

zephir_echo_expressions(R) ::= zephir_echo_expression(A) . {
	R = zephir_ret_list(NULL, A);
}

zephir_echo_expression(R) ::= zephir_common_expr(E) . {
	R = E;;
}

/* mcall statement */
zephir_mcall_statement(R) ::= zephir_mcall_expr(E) DOTCOMMA . {
	R = zephir_ret_mcall_statement(E, status->scanner_state);
}

/* fcall statement */
zephir_fcall_statement(R) ::= zephir_fcall_expr(E) DOTCOMMA . {
	R = zephir_ret_fcall_statement(E, status->scanner_state);
}

/* scall statement */
zephir_scall_statement(R) ::= zephir_scall_expr(E) DOTCOMMA . {
	R = zephir_ret_scall_statement(E, status->scanner_state);
}

/* fetch statement */
zephir_fetch_statement(R) ::= zephir_fetch_expr(E) DOTCOMMA . {
	R = zephir_ret_fetch_statement(E, status->scanner_state);
}

/* return statement */
zephir_return_statement(R) ::= RETURN zephir_common_expr(E) DOTCOMMA . {
	R = zephir_ret_return_statement(E, status->scanner_state);
}

/* return statement */
zephir_return_statement(R) ::= RETURN DOTCOMMA . {
	R = zephir_ret_return_statement(NULL, status->scanner_state);
}

/* require statement */
zephir_require_statement(R) ::= REQUIRE zephir_common_expr(E) DOTCOMMA . {
	R = zephir_ret_require_statement(E, status->scanner_state);
}

/* unset {expr} */
zephir_unset_statement(R) ::= UNSET zephir_common_expr(E) DOTCOMMA . {
	R = zephir_ret_unset_statement(E, status->scanner_state);
}

/* throw {expr} */
zephir_throw_statement(R) ::= THROW zephir_common_expr(E) DOTCOMMA . {
	R = zephir_ret_throw_exception(E, status->scanner_state);
}

zephir_declare_statement(R) ::= TYPE_INTEGER zephir_declare_variable_list(L) DOTCOMMA . {
	R = zephir_ret_declare_statement(ZEPHIR_T_TYPE_INTEGER, L, status->scanner_state);
}

zephir_declare_statement(R) ::= TYPE_UINTEGER zephir_declare_variable_list(L) DOTCOMMA . {
	R = zephir_ret_declare_statement(ZEPHIR_T_TYPE_UINTEGER, L, status->scanner_state);
}

zephir_declare_statement(R) ::= TYPE_CHAR zephir_declare_variable_list(L) DOTCOMMA . {
	R = zephir_ret_declare_statement(ZEPHIR_T_TYPE_CHAR, L, status->scanner_state);
}

zephir_declare_statement(R) ::= TYPE_UCHAR zephir_declare_variable_list(L) DOTCOMMA . {
	R = zephir_ret_declare_statement(ZEPHIR_T_TYPE_UCHAR, L, status->scanner_state);
}

zephir_declare_statement(R) ::= TYPE_LONG zephir_declare_variable_list(L) DOTCOMMA . {
	R = zephir_ret_declare_statement(ZEPHIR_T_TYPE_LONG, L, status->scanner_state);
}

zephir_declare_statement(R) ::= TYPE_ULONG zephir_declare_variable_list(L) DOTCOMMA . {
	R = zephir_ret_declare_statement(ZEPHIR_T_TYPE_ULONG, L, status->scanner_state);
}

zephir_declare_statement(R) ::= TYPE_DOUBLE zephir_declare_variable_list(L) DOTCOMMA . {
	R = zephir_ret_declare_statement(ZEPHIR_T_TYPE_DOUBLE, L, status->scanner_state);
}

zephir_declare_statement(R) ::= TYPE_STRING zephir_declare_variable_list(L) DOTCOMMA . {
	R = zephir_ret_declare_statement(ZEPHIR_T_TYPE_STRING, L, status->scanner_state);
}

zephir_declare_statement(R) ::= TYPE_BOOL zephir_declare_variable_list(L) DOTCOMMA . {
	R = zephir_ret_declare_statement(ZEPHIR_T_TYPE_BOOL, L, status->scanner_state);
}

zephir_declare_statement(R) ::= TYPE_VAR zephir_declare_variable_list(L) DOTCOMMA . {
	R = zephir_ret_declare_statement(ZEPHIR_T_TYPE_VAR, L, status->scanner_state);
}

zephir_declare_statement(R) ::= TYPE_ARRAY zephir_declare_variable_list(L) DOTCOMMA . {
	R = zephir_ret_declare_statement(ZEPHIR_T_TYPE_ARRAY, L, status->scanner_state);
}

zephir_declare_variable_list(R) ::= zephir_declare_variable_list(L) COMMA zephir_declare_variable(V) . {
	R = zephir_ret_list(L, V);
}

zephir_declare_variable_list(R) ::= zephir_declare_variable(V) . {
	R = zephir_ret_list(NULL, V);
}

zephir_declare_variable(R) ::= IDENTIFIER(I) . {
	R = zephir_ret_declare_variable(I, NULL, status->scanner_state);
}

zephir_declare_variable(R) ::= IDENTIFIER(I) ASSIGN zephir_literal_expr(E) . {
	R = zephir_ret_declare_variable(I, E, status->scanner_state);
}

zephir_assign_expr(R) ::= zephir_common_expr(E) . {
	R = E;
}

zephir_common_expr(R) ::= NOT zephir_common_expr(O1) . {
	R = zephir_ret_expr("not", O1, NULL, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= SUB zephir_common_expr(O1) . {
	R = zephir_ret_expr("minus", O1, NULL, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= ISSET zephir_common_expr(O1) . {
	R = zephir_ret_expr("isset", O1, NULL, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= REQUIRE zephir_common_expr(O1) . {
	R = zephir_ret_expr("require", O1, NULL, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= CLONE zephir_common_expr(O1) . {
	R = zephir_ret_expr("clone", O1, NULL, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= EMPTY zephir_common_expr(O1) . {
	R = zephir_ret_expr("empty", O1, NULL, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= LIKELY zephir_common_expr(O1) . {
	R = zephir_ret_expr("likely", O1, NULL, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= UNLIKELY zephir_common_expr(O1) . {
	R = zephir_ret_expr("unlikely", O1, NULL, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= zephir_common_expr(O1) EQUALS zephir_common_expr(O2) . {
	R = zephir_ret_expr("equals", O1, O2, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= zephir_common_expr(O1) NOTEQUALS zephir_common_expr(O2) . {
	R = zephir_ret_expr("not-equals", O1, O2, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= zephir_common_expr(O1) IDENTICAL zephir_common_expr(O2) . {
	R = zephir_ret_expr("identical", O1, O2, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= zephir_common_expr(O1) NOTIDENTICAL zephir_common_expr(O2) . {
	R = zephir_ret_expr("not-identical", O1, O2, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= zephir_common_expr(O1) LESS zephir_common_expr(O2) . {
	R = zephir_ret_expr("less", O1, O2, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= zephir_common_expr(O1) GREATER zephir_common_expr(O2) . {
	R = zephir_ret_expr("greater", O1, O2, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= zephir_common_expr(O1) LESSEQUAL zephir_common_expr(O2) . {
	R = zephir_ret_expr("less-equal", O1, O2, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= zephir_common_expr(O1) GREATEREQUAL zephir_common_expr(O2) . {
	R = zephir_ret_expr("greater-equal", O1, O2, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= PARENTHESES_OPEN zephir_common_expr(O1) PARENTHESES_CLOSE . {
	R = zephir_ret_expr("list", O1, NULL, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= PARENTHESES_OPEN zephir_parameter_type(O1) PARENTHESES_CLOSE zephir_common_expr(O2) . {
	R = zephir_ret_expr("cast", O1, O2, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= LESS IDENTIFIER(I) GREATER zephir_common_expr(O2) . {
	R = zephir_ret_expr("type-hint", zephir_ret_literal(ZEPHIR_T_IDENTIFIER, I, status->scanner_state), O2, NULL, status->scanner_state);
}

zephir_common_expr(R) ::= zephir_common_expr(V) ARROW IDENTIFIER(I) . {
	R = zephir_ret_expr("property-access", V, zephir_ret_literal(ZEPHIR_T_IDENTIFIER, I, status->scanner_state), NULL, status->scanner_state);
}

zephir_common_expr(R) ::= zephir_common_expr(V) ARROW BRACKET_OPEN IDENTIFIER(I) BRACKET_CLOSE . {
	R = zephir_ret_expr("property-dynamic-access", V, zephir_ret_literal(ZEPHIR_T_IDENTIFIER, I, status->scanner_state), NULL, status->scanner_state);
}

zephir_common_expr(R) ::= zephir_common_expr(V) ARROW BRACKET_OPEN STRING(S) BRACKET_CLOSE . {
	R = zephir_ret_expr("property-string-access", V, zephir_ret_literal(ZEPHIR_T_STRING, S, status->scanner_state), NULL, status->scanner_state);
}

zephir_common_expr(R) ::= IDENTIFIER(V) DOUBLECOLON IDENTIFIER(I) . {
	R = zephir_ret_expr("static-property-access", zephir_ret_literal(ZEPHIR_T_IDENTIFIER, V, status->scanner_state), zephir_ret_literal(ZEPHIR_T_IDENTIFIER, I, status->scanner_state), NULL, status->scanner_state);
}

zephir_common_expr(R) ::= IDENTIFIER(V) DOUBLECOLON CONSTANT(I) . {
	R = zephir_ret_expr("static-constant-access", zephir_ret_literal(ZEPHIR_T_IDENTIFIER, V, status->scanner_state), zephir_ret_literal(ZEPHIR_T_IDENTIFIER, I, status->scanner_state), NULL, status->scanner_state);
}

/* y = v[expr] */
/*zephir_common_expr(R) ::= IDENTIFIER(V) SBRACKET_OPEN zephir_common_expr(I) SBRACKET_CLOSE . {
	R = zephir_ret_expr("array-access", zephir_ret_literal(ZEPHIR_T_IDENTIFIER, V, status->scanner_state), I, NULL, status->scanner_state);
}*/

zephir_common_expr(R) ::= zephir_common_expr(V) SBRACKET_OPEN zephir_common_expr(I) SBRACKET_CLOSE . {
	R = zephir_ret_expr("array-access", V, I, NULL, status->scanner_state);
}

/* y = a + b */
zephir_common_expr(R) ::= zephir_common_expr(O1) ADD zephir_common_expr(O2) . {
	R = zephir_ret_expr("add", O1, O2, NULL, status->scanner_state);
}

/* y = a - b */
zephir_common_expr(R) ::= zephir_common_expr(O1) SUB zephir_common_expr(O2) . {
	R = zephir_ret_expr("sub", O1, O2, NULL, status->scanner_state);
}

/* y = a * b */
zephir_common_expr(R) ::= zephir_common_expr(O1) MUL zephir_common_expr(O2) . {
	R = zephir_ret_expr("mul", O1, O2, NULL, status->scanner_state);
}

/* y = a / b */
zephir_common_expr(R) ::= zephir_common_expr(O1) DIV zephir_common_expr(O2) . {
	R = zephir_ret_expr("div", O1, O2, NULL, status->scanner_state);
}

/* y = a % b */
zephir_common_expr(R) ::= zephir_common_expr(O1) MOD zephir_common_expr(O2) . {
	R = zephir_ret_expr("mod", O1, O2, NULL, status->scanner_state);
}

/* y = a . b */
zephir_common_expr(R) ::= zephir_common_expr(O1) CONCAT zephir_common_expr(O2) . {
	R = zephir_ret_expr("concat", O1, O2, NULL, status->scanner_state);
}

/* y = a && b */
zephir_common_expr(R) ::= zephir_common_expr(O1) AND zephir_common_expr(O2) . {
	R = zephir_ret_expr("and", O1, O2, NULL, status->scanner_state);
}

/* y = a || b */
zephir_common_expr(R) ::= zephir_common_expr(O1) OR zephir_common_expr(O2) . {
	R = zephir_ret_expr("or", O1, O2, NULL, status->scanner_state);
}

/* y = a & b */
zephir_common_expr(R) ::= zephir_common_expr(O1) BITWISE_AND zephir_common_expr(O2) . {
	R = zephir_ret_expr("bitwise_and", O1, O2, NULL, status->scanner_state);
}

/* y = a | b */
zephir_common_expr(R) ::= zephir_common_expr(O1) BITWISE_OR zephir_common_expr(O2) . {
	R = zephir_ret_expr("bitwise_or", O1, O2, NULL, status->scanner_state);
}

/* y = a ^ b */
zephir_common_expr(R) ::= zephir_common_expr(O1) BITWISE_XOR zephir_common_expr(O2) . {
	R = zephir_ret_expr("bitwise_xor", O1, O2, NULL, status->scanner_state);
}

/* y = a << b */
zephir_common_expr(R) ::= zephir_common_expr(O1) BITWISE_SHIFTLEFT zephir_common_expr(O2) . {
	R = zephir_ret_expr("bitwise_shiftleft", O1, O2, NULL, status->scanner_state);
}

/* y = a >> b */
zephir_common_expr(R) ::= zephir_common_expr(O1) BITWISE_SHIFTRIGHT zephir_common_expr(O2) . {
	R = zephir_ret_expr("bitwise_shiftright", O1, O2, NULL, status->scanner_state);
}

/* y = a instanceof b */
zephir_common_expr(R) ::= zephir_common_expr(O1) INSTANCEOF zephir_common_expr(O2) . {
	R = zephir_ret_expr("instanceof", O1, O2, NULL, status->scanner_state);
}

/* y = fetch x, z[k] */
zephir_fetch_expr(R) ::= FETCH IDENTIFIER(O1) COMMA zephir_common_expr(O2) . {
	R = zephir_ret_expr("fetch", zephir_ret_literal(ZEPHIR_T_IDENTIFIER, O1, status->scanner_state), O2, NULL, status->scanner_state);
}

/* y = fetch x, z[k] */
zephir_common_expr(R) ::= zephir_fetch_expr(E) . {
	R = E;
}

/* y = typeof b */
zephir_common_expr(R) ::= TYPEOF zephir_common_expr(O1) . {
	R = zephir_ret_expr("typeof", O1, NULL, NULL, status->scanner_state);
}

/* y = x */
zephir_common_expr(R) ::= IDENTIFIER(I) . {
	R = zephir_ret_literal(ZEPHIR_T_IDENTIFIER, I, status->scanner_state);
}

/* y = 100 */
zephir_common_expr(R) ::= INTEGER(I) . {
	R = zephir_ret_literal(ZEPHIR_T_INTEGER, I, status->scanner_state);
}

/* y = "hello" */
zephir_common_expr(R) ::= STRING(S) . {
	R = zephir_ret_literal(ZEPHIR_T_STRING, S, status->scanner_state);
}

/* y = 'h' */
zephir_common_expr(R) ::= CHAR(S) . {
	R = zephir_ret_literal(ZEPHIR_T_CHAR, S, status->scanner_state);
}

/* y = 12.5 */
zephir_common_expr(R) ::= DOUBLE(D) . {
	R = zephir_ret_literal(ZEPHIR_T_DOUBLE, D, status->scanner_state);
}

/* y = null */
zephir_common_expr(R) ::= NULL . {
	R = zephir_ret_literal(ZEPHIR_T_NULL, NULL, status->scanner_state);
}

/* y = false */
zephir_common_expr(R) ::= TRUE . {
	R = zephir_ret_literal(ZEPHIR_T_TRUE, NULL, status->scanner_state);
}

/* y = false */
zephir_common_expr(R) ::= FALSE . {
	R = zephir_ret_literal(ZEPHIR_T_FALSE, NULL, status->scanner_state);
}

/* y = XX */
zephir_common_expr(R) ::= CONSTANT(I) . {
	R = zephir_ret_literal(ZEPHIR_T_CONSTANT, I, status->scanner_state);
}

/* y = [] */
zephir_common_expr(R) ::= SBRACKET_OPEN SBRACKET_CLOSE . {
	R = zephir_ret_expr("empty-array", NULL, NULL, NULL, status->scanner_state);
}

/* y = [1, 2, 3] */
zephir_common_expr(R) ::= SBRACKET_OPEN zephir_array_list(L) SBRACKET_CLOSE . {
	R = zephir_ret_expr("array", L, NULL, NULL, status->scanner_state);
}

/* y = new MyClass */
zephir_common_expr(R) ::= NEW IDENTIFIER(I) . {
	R = zephir_ret_new_instance(0, I, NULL, status->scanner_state);
}

/* y = new MyClass() */
zephir_common_expr(R) ::= NEW IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE . {
	R = zephir_ret_new_instance(0, I, NULL, status->scanner_state);
}

/* y = new MyClass(false, x) */
zephir_common_expr(R) ::= NEW IDENTIFIER(I) PARENTHESES_OPEN zephir_call_parameters(P) PARENTHESES_CLOSE . {
	R = zephir_ret_new_instance(0, I, P, status->scanner_state);
}

/* y = new {MyClass} */
zephir_common_expr(R) ::= NEW BRACKET_OPEN IDENTIFIER(I) BRACKET_CLOSE . {
	R = zephir_ret_new_instance(1, I, NULL, status->scanner_state);
}

/* y = new {MyClass}() */
zephir_common_expr(R) ::= NEW BRACKET_OPEN IDENTIFIER(I) BRACKET_CLOSE PARENTHESES_OPEN PARENTHESES_CLOSE . {
	R = zephir_ret_new_instance(1, I, NULL, status->scanner_state);
}

/* y = new {MyClass}(false, x) */
zephir_common_expr(R) ::= NEW BRACKET_OPEN IDENTIFIER(I) BRACKET_CLOSE PARENTHESES_OPEN zephir_call_parameters(P) PARENTHESES_CLOSE . {
	R = zephir_ret_new_instance(1, I, P, status->scanner_state);
}

/* y = f(false, x) */
zephir_fcall_expr(R) ::= IDENTIFIER(I) PARENTHESES_OPEN zephir_call_parameters(P) PARENTHESES_CLOSE . {
	R = zephir_ret_fcall(1, I, P, status->scanner_state);
}

/* y = f() */
zephir_fcall_expr(R) ::= IDENTIFIER(I) PARENTHESES_OPEN PARENTHESES_CLOSE . {
	R = zephir_ret_fcall(1, I, NULL, status->scanner_state);
}

/* y = {f}(false, x) */
zephir_fcall_expr(R) ::= BRACKET_OPEN IDENTIFIER(I) BRACKET_CLOSE PARENTHESES_OPEN zephir_call_parameters(P) PARENTHESES_CLOSE . {
	R = zephir_ret_fcall(2, I, P, status->scanner_state);
}

/* y = {f}() */
zephir_fcall_expr(R) ::= BRACKET_OPEN IDENTIFIER(I) BRACKET_CLOSE PARENTHESES_OPEN PARENTHESES_CLOSE . {
	R = zephir_ret_fcall(2, I, NULL, status->scanner_state);
}

/* o::m(false, x) */
zephir_scall_expr(R) ::= IDENTIFIER(O) DOUBLECOLON IDENTIFIER(M) PARENTHESES_OPEN zephir_call_parameters(P) PARENTHESES_CLOSE . {
	R = zephir_ret_scall(0, O, 0, M, P, status->scanner_state);
}

/* o::m() */
zephir_scall_expr(R) ::= IDENTIFIER(O) DOUBLECOLON IDENTIFIER(M) PARENTHESES_OPEN PARENTHESES_CLOSE . {
	R = zephir_ret_scall(0, O, 0, M, NULL, status->scanner_state);
}

/* {o}::m(false, x) */
zephir_scall_expr(R) ::= BRACKET_OPEN IDENTIFIER(O) BRACKET_CLOSE DOUBLECOLON IDENTIFIER(M) PARENTHESES_OPEN zephir_call_parameters(P) PARENTHESES_CLOSE . {
	R = zephir_ret_scall(1, O, 0, M, P, status->scanner_state);
}

/* {o}::m() */
zephir_scall_expr(R) ::= BRACKET_OPEN IDENTIFIER(O) BRACKET_CLOSE DOUBLECOLON IDENTIFIER(M) PARENTHESES_OPEN PARENTHESES_CLOSE . {
	R = zephir_ret_scall(1, O, 0, M, NULL, status->scanner_state);
}

/* {o}::{m}(false, x) */
zephir_scall_expr(R) ::= BRACKET_OPEN IDENTIFIER(O) BRACKET_CLOSE DOUBLECOLON BRACKET_OPEN IDENTIFIER(M) BRACKET_CLOSE PARENTHESES_OPEN zephir_call_parameters(P) PARENTHESES_CLOSE . {
	R = zephir_ret_scall(1, O, 1, M, P, status->scanner_state);
}

/* {o}::{m}() */
zephir_scall_expr(R) ::= BRACKET_OPEN IDENTIFIER(O) BRACKET_CLOSE DOUBLECOLON BRACKET_OPEN IDENTIFIER(M) BRACKET_CLOSE PARENTHESES_OPEN PARENTHESES_CLOSE . {
	R = zephir_ret_scall(1, O, 1, M, NULL, status->scanner_state);
}

/* o->m(false, x) */
zephir_mcall_expr(R) ::= zephir_common_expr(O) ARROW IDENTIFIER(M) PARENTHESES_OPEN zephir_call_parameters(P) PARENTHESES_CLOSE . {
	R = zephir_ret_mcall(1, O, M, P, status->scanner_state);
}

/* o->m() */
zephir_mcall_expr(R) ::= zephir_common_expr(O) ARROW IDENTIFIER(M) PARENTHESES_OPEN PARENTHESES_CLOSE . {
	R = zephir_ret_mcall(1, O, M, NULL, status->scanner_state);
}

/* o->{m}(false, x) */
zephir_mcall_expr(R) ::= zephir_common_expr(O) ARROW BRACKET_OPEN IDENTIFIER(M) BRACKET_CLOSE PARENTHESES_OPEN zephir_call_parameters(P) PARENTHESES_CLOSE . {
	R = zephir_ret_mcall(2, O, M, P, status->scanner_state);
}

/* o->{m}() */
zephir_mcall_expr(R) ::= zephir_common_expr(O) ARROW BRACKET_OPEN IDENTIFIER(M) BRACKET_CLOSE PARENTHESES_OPEN PARENTHESES_CLOSE . {
	R = zephir_ret_mcall(2, O, M, NULL, status->scanner_state);
}

/* o->{"m"}(false, x) */
zephir_mcall_expr(R) ::= zephir_common_expr(O) ARROW BRACKET_OPEN STRING(S) BRACKET_CLOSE PARENTHESES_OPEN zephir_call_parameters(P) PARENTHESES_CLOSE . {
	R = zephir_ret_mcall(3, O, S, P, status->scanner_state);
}

/* o->{"m"}() */
zephir_mcall_expr(R) ::= zephir_common_expr(O) ARROW BRACKET_OPEN STRING(S) BRACKET_CLOSE PARENTHESES_OPEN PARENTHESES_CLOSE . {
	R = zephir_ret_mcall(3, O, S, NULL, status->scanner_state);
}

/* y = o->m(false, x) or y = o->m() */
zephir_common_expr(R) ::= zephir_mcall_expr(E) . {
	R = E;
}

/* y = o::m(false, x) or y = o::m() */
zephir_common_expr(R) ::= zephir_scall_expr(E) . {
	R = E;
}

/* f() or f(1, 2, 3) */
zephir_common_expr(R) ::= zephir_fcall_expr(E) . {
	R = E;
}

/* a ? b : c */
zephir_common_expr(R) ::= zephir_common_expr(O1) QUESTION zephir_common_expr(O2) COLON zephir_common_expr(O3) . {
	R = zephir_ret_expr("ternary", O1, O2, O3, status->scanner_state);
}

zephir_call_parameters(R) ::= zephir_call_parameters(L) COMMA zephir_call_parameter(P) . {
	R = zephir_ret_list(L, P);
}

zephir_call_parameters(R) ::= zephir_call_parameter(P) . {
	R = zephir_ret_list(NULL, P);
}

zephir_call_parameter(R) ::= zephir_common_expr(E) . {
	R = zephir_ret_call_parameter(NULL, E, status->scanner_state);
}

zephir_call_parameter(R) ::= IDENTIFIER(I) COLON zephir_common_expr(E) . {
	R = zephir_ret_call_parameter(I, E, status->scanner_state);
}

zephir_array_list(R) ::= zephir_array_list(L) COMMA zephir_array_item(I) . {
	R = zephir_ret_list(L, I);
}

zephir_array_list(R) ::= zephir_array_item(I) . {
	R = zephir_ret_list(NULL, I);
}

zephir_array_item(R) ::= zephir_array_key(K) COLON zephir_array_value(V) . {
	R = zephir_ret_array_item(K, V, status->scanner_state);
}

zephir_array_item(R) ::= zephir_array_value(V) . {
	R = zephir_ret_array_item(NULL, V, status->scanner_state);
}

zephir_array_key(R) ::= IDENTIFIER(I) . {
	R = zephir_ret_literal(ZEPHIR_T_IDENTIFIER, I, status->scanner_state);
}

zephir_array_key(R) ::= STRING(S) . {
	R = zephir_ret_literal(ZEPHIR_T_STRING, S, status->scanner_state);
}

zephir_array_key(R) ::= INTEGER(I) . {
	R = zephir_ret_literal(ZEPHIR_T_INTEGER, I, status->scanner_state);
}

zephir_array_value(R) ::= zephir_common_expr(E) . {
	R = E;
}

/** zephir_literal_expr */
zephir_literal_expr(R) ::= INTEGER(I) . {
	R = zephir_ret_literal(ZEPHIR_T_INTEGER, I, status->scanner_state);
}

zephir_literal_expr(R) ::= CHAR(C) . {
	R = zephir_ret_literal(ZEPHIR_T_CHAR, C, status->scanner_state);
}

zephir_literal_expr(R) ::= STRING(S) . {
	R = zephir_ret_literal(ZEPHIR_T_STRING, S, status->scanner_state);
}

zephir_literal_expr(R) ::= DOUBLE(D) . {
	R = zephir_ret_literal(ZEPHIR_T_DOUBLE, D, status->scanner_state);
}

zephir_literal_expr(R) ::= NULL . {
	R = zephir_ret_literal(ZEPHIR_T_NULL, NULL, status->scanner_state);
}

zephir_literal_expr(R) ::= FALSE . {
	R = zephir_ret_literal(ZEPHIR_T_FALSE, NULL, status->scanner_state);
}

zephir_literal_expr(R) ::= TRUE . {
	R = zephir_ret_literal(ZEPHIR_T_TRUE, NULL, status->scanner_state);
}

zephir_literal_expr(R) ::= IDENTIFIER(V) DOUBLECOLON CONSTANT(I) . {
	R = zephir_ret_expr("static-constant-access", zephir_ret_literal(ZEPHIR_T_IDENTIFIER, V, status->scanner_state), zephir_ret_literal(ZEPHIR_T_IDENTIFIER, I, status->scanner_state), NULL, status->scanner_state);
}

zephir_literal_expr(R) ::= CONSTANT(I) . {
	R = zephir_ret_literal(ZEPHIR_T_CONSTANT, I, status->scanner_state);
}

zephir_literal_expr(R) ::= SBRACKET_OPEN SBRACKET_CLOSE . {
	R = zephir_ret_expr("empty-array", NULL, NULL, NULL, status->scanner_state);
}

zephir_literal_expr(R) ::= SBRACKET_OPEN zephir_literal_array_list(L) SBRACKET_CLOSE . {
	R = zephir_ret_expr("array", L, NULL, NULL, status->scanner_state);
}

zephir_literal_array_list(R) ::= zephir_literal_array_list(L) COMMA zephir_literal_array_item(I) . {
	R = zephir_ret_list(L, I);
}

zephir_literal_array_list(R) ::= zephir_literal_array_item(I) . {
	R = zephir_ret_list(NULL, I);
}

zephir_literal_array_item(R) ::= zephir_literal_array_key(K) COLON zephir_literal_array_value(V) . {
	R = zephir_ret_array_item(K, V, status->scanner_state);
}

zephir_literal_array_item(R) ::= zephir_literal_array_value(V) . {
	R = zephir_ret_array_item(NULL, V, status->scanner_state);
}

zephir_literal_array_key(R) ::= IDENTIFIER(I) . {
	R = zephir_ret_literal(ZEPHIR_T_IDENTIFIER, I, status->scanner_state);
}

zephir_literal_array_key(R) ::= STRING(S) . {
	R = zephir_ret_literal(ZEPHIR_T_STRING, S, status->scanner_state);
}

zephir_literal_array_key(R) ::= INTEGER(I) . {
	R = zephir_ret_literal(ZEPHIR_T_INTEGER, I, status->scanner_state);
}

zephir_literal_array_value(R) ::= zephir_literal_expr(E) . {
	R = E;
}

zephir_eval_expr(R) ::= zephir_common_expr(E) . {
	R = E;
}

zephir_comment(R) ::= COMMENT(C) . {
	R = zephir_ret_comment(C, status->scanner_state);
}

zephir_cblock(R) ::= CBLOCK(C) . {
	R = zephir_ret_cblock(C, status->scanner_state);
}
